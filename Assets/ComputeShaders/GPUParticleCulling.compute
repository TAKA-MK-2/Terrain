// カリングを行う
#pragma kernel FrustumCulling

// スレッド数
#define THREAD_NUM_X 32

// パーティクル情報
struct GPUParticleData
{
	// アクティブか判断する
	bool isActive;
	// 座標
	float3 position;
	// 速度
	float3 velocity;
	// スケール
	float scale;
	// 開始スケール
	float startScale;
	// 最終スケール
	float endScale;
	// 色
	float4 color;
	// 生存時間
	float lifeTime;
	// 経過時間
	float elapsedTime;
};

// パーティクル情報
StructuredBuffer<GPUParticleData> _particlesBuffer;
StructuredBuffer<uint> _activeParticlesBuffer;
// 視界内のパーティクルの要素番号
AppendStructuredBuffer<uint> _inViewParticlesBuffer;

// パーティクル数
int _numParticles;
// カメラ座標
float3 _cameraPosition;
// 分割した視錐台の法線
float4x3 _cameraFrustumNormals;

[numthreads(THREAD_NUM_X, 1, 1)]
void FrustumCulling(uint3 id : SV_DispatchThreadID)
{
	// スレッドの番号を取得
	uint index = id.x;

	// パーティクルの要素番号を取得
	uint particleIndex = _activeParticlesBuffer[index];

	// パーティクル情報を取得
	GPUParticleData data = _particlesBuffer[particleIndex];

	// カメラからのローカル座標
	float3 posFromCamera = data.position - _cameraPosition;

	// パーティクルのスケール
	float scale = data.scale;

	// 視推台内にあるか判定
	if (data.isActive &&
		(dot(_cameraFrustumNormals[0], posFromCamera) > -scale) &&
		(dot(_cameraFrustumNormals[1], posFromCamera) > -scale) &&
		(dot(_cameraFrustumNormals[2], posFromCamera) > -scale) &&
		(dot(_cameraFrustumNormals[3], posFromCamera) > -scale)
		)
	{
		// 視界内のパーティクルリストに追加
		_inViewParticlesBuffer.Append(particleIndex);
	}
}
