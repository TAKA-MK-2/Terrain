// カリングを判定する
#pragma kernel CheckCameraCulling

// スレッド数
#define THREAD_NUM_X 32

// GPUパーティクル情報
struct GPUParticleData
{
	// アクティブか判断する
	bool isActive;
	// 座標
	float3 position;
	// 速度
	float3 velocity;
	// 回転
	float3 rotation;
	// 角速度
	float3 angVelocity;
	// スケール
	float scale;
	// 開始スケール
	float startScale;
	// 最終スケール
	float endScale;
	// 生存時間
	float lifeTime;
	// 経過時間
	float elapsedTime;
};

// パーティクル数
int _numParticles;

// カメラ座標
float3 _cameraPosition;
// カメラの視錐台の法線
float4x3 _cameraFrustumNormals;

// GPUパーティクルのバッファ
StructuredBuffer<GPUParticleData> _particlesBuffer;
// 写っているパーティクルリストのバッファ
AppendStructuredBuffer<uint> _inViewAppend;
// アクティブ状態のパーティクルの番号のバッファ
StructuredBuffer<uint> _particleActiveList;

[numthreads(THREAD_NUM_X, 1, 1)]
void CheckCameraCulling(uint3 id : SV_DispatchThreadID)
{
	// スレッドの番号を取得
	uint idx = id.x;
	
	// パーティクルの番号を取得
	uint particleIndex = _particleActiveList[idx];

	if (particleIndex < _numParticles) 
	{
		// GPUパーティクルのデータを取得
		GPUParticleData data = _particlesBuffer[particleIndex];

		// CheckCulling!
		float3 posFromCamera = data.position - _cameraPosition;
		float scale = data.scale;

		if (data.isActive &&
			(dot(_cameraFrustumNormals[0], posFromCamera) > -scale)
			&& (dot(_cameraFrustumNormals[1], posFromCamera) > -scale)
			&& (dot(_cameraFrustumNormals[2], posFromCamera) > -scale)
			&& (dot(_cameraFrustumNormals[3], posFromCamera) > -scale)
			)
		{
			_inViewAppend.Append(particleIndex);
		}
	}
}
